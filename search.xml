<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组的算法例题</title>
      <link href="2021/01/30/c-c/shu-zu-de-suan-fa-li-ti/"/>
      <url>2021/01/30/c-c/shu-zu-de-suan-fa-li-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="筛法求素数-100以内的素数"><a href="#筛法求素数-100以内的素数" class="headerlink" title="筛法求素数(100以内的素数)"></a>筛法求素数(100以内的素数)</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;#define num 100int isPrime[num + 5];int main()&#123;    for (int i &#x3D; 2; i &lt;&#x3D; num; ++i) &#123;        isPrime[i] &#x3D; 1;  &#x2F;&#x2F;将数组的所有数据假设为1    &#125;    for (int i &#x3D; 2; i &lt;&#x3D; num; ++i) &#123;        if (isPrime[i] &#x3D;&#x3D; 1) &#123;            for (int j &#x3D; 2 * i; j &lt;&#x3D; num; j +&#x3D; i) &#123;                isPrime[j] &#x3D; 0; &#x2F;&#x2F;将数组中不是素数的数据标记为0            &#125;        &#125;    &#125;    for (int i &#x3D; 2; i &lt;&#x3D; num; ++i) &#123;        if (isPrime[i] &#x3D;&#x3D; 1)&#123;            cout &lt;&lt; i &lt;&lt; &quot; &quot;; &#x2F;&#x2F;输出所有数据为1的数组下标        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断星期几"><a href="#判断星期几" class="headerlink" title="判断星期几"></a>判断星期几</h2><p><strong>已知2012年1月25日是星期三，编写一个程序输入一个2012年1月25日后的日期，输出该日期是星期几（星期天输出0）</strong><br>分析2012年1月25日是星期三，那么2012年1月22日是星期日</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;输入形式：2012 03 06#include &lt;iostream&gt;using namespace std;int main()&#123;    int month_days[13] &#x3D; &#123;-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;    int year, month, day;    cin &gt;&gt; year &gt;&gt; month &gt;&gt; day;    for (int i &#x3D; 2012; i &lt; year; ++i) &#123;        if(i % 4 &#x3D;&#x3D; 0 &amp;&amp; i % 100 !&#x3D; 0 || i % 400 &#x3D;&#x3D; 0)&#123; &#x2F;&#x2F;判断是不是闰年            day +&#x3D; 366;        &#125; else&#123;            day +&#x3D; 365;        &#125;    &#125;    if(year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0 || year % 400 &#x3D;&#x3D; 0)&#123;        month_days[2] &#x3D; 29;    &#125;    for (int i &#x3D; 1; i &lt; month; ++i) &#123;        day +&#x3D; month_days[i];    &#125;    day -&#x3D; 22;    cout &lt;&lt; day % 7;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="矩阵的乘法"><a href="#矩阵的乘法" class="headerlink" title="矩阵的乘法"></a>矩阵的乘法</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;输入形式：&#x2F;&#x2F;2 3&#x2F;&#x2F;1 1 1&#x2F;&#x2F;1 1 1&#x2F;&#x2F;3 3&#x2F;&#x2F;1 1 1&#x2F;&#x2F;1 1 1&#x2F;&#x2F;1 1 1#include &lt;iostream&gt;using namespace std;int main()&#123;    int m, n, q, w;    cin &gt;&gt; m &gt;&gt; n;    int a[m][n];    for (int i &#x3D; 1; i &lt;&#x3D; m; ++i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; ++j) &#123;            cin &gt;&gt; a[i][j];        &#125;    &#125;    cin &gt;&gt; q &gt;&gt; w;    int b[q][w];    for (int i &#x3D; 1; i &lt;&#x3D; q; ++i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; w; ++j) &#123;            cin &gt;&gt; b[i][j];        &#125;    &#125;    int c[100][100];    for (int i &#x3D; 1; i &lt;&#x3D; m; ++i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; w; ++j) &#123;            c[i][j] &#x3D; 0;            for (int k &#x3D; 1; k &lt;&#x3D; n; ++k) &#123;                c[i][j] +&#x3D; a[i][k] * b[k][j];            &#125;        &#125;    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; m; ++i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; w; ++j) &#123;            cout &lt;&lt; c[i][j] &lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++循环</title>
      <link href="2021/01/27/c-c/c-xun-huan/"/>
      <url>2021/01/27/c-c/c-xun-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>只要条件为真，<code>while</code>语句就能重复地执行循环体。<br><strong>语法形式为：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(condition)&#123;  &#x2F;&#x2F;只要condition的值为真，就能一直执行    statement&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>【注】</strong>:当不清楚要迭代多少次的时候，最好使用<code>while</code>循环。</p><h2 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h2><p><code>do while</code>语句和<code>while</code>语句相似，唯一区别是<code>do while</code>语句先执行循环体后再进行检查条件。因此不管怎么样，<code>do while</code>都至少会执行一次循环。<br><strong>语法形式为：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">do    statementwhile(condition);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p><strong>语法形式为：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(init-statement; condition; expression)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>for</code>循环语句头中的<code>init-statement</code>,<code>condition</code>,<code>expression</code>可以都为空，但是分号必须保留。当这三者都为空时，程序将陷入死循环，但是可以通过<code>break</code>跳出。</p><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>可以出现在任意的循环体中，其作用是跳出循环。在多重循环的情况下，<code>break</code>只能跳出直接包含它的那一重循环。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    int n &#x3D; 0;    while (true)&#123;        if (n &gt; 100)&#123;            break;        &#125;        ++n;    &#125;    cout &lt;&lt; n; &#x2F;&#x2F;打印结果：101    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>终止最近的循环中的当前迭代并立即开始下一次迭代。（也就是立即终止本次循环，开始下一次循环）。<br><code>continue</code>在多重循环里和<code>break</code>一致，<code>continue</code>只对自己包含它的那一重循环起作用。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; 10; ++i) &#123;        if (i % 2)            continue;        cout &lt;&lt; i &lt;&lt; endl; &#x2F;&#x2F;打印结果：2,4,6,8,10    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例：输入正整数n(n&gt;=2),求不大于n的全部质数。</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    int n;    cin &gt;&gt; n;    cout &lt;&lt; 2 &lt;&lt; endl;    for (int i &#x3D; 3; i &lt;&#x3D; n; i +&#x3D; 2) &#123;        int k;        for (k &#x3D; 3; k &lt; i; k +&#x3D; 2) &#123;            if(i % k &#x3D;&#x3D; 0)&#123;                break;            &#125;            if (k * k &gt; i) &#123;                break;            &#125;        &#125;        if(k*k &gt; i)&#123;            cout &lt;&lt; i &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Switch语句</title>
      <link href="2021/01/27/c-c/switch-yu-ju/"/>
      <url>2021/01/27/c-c/switch-yu-ju/</url>
      
        <content type="html"><![CDATA[<p><code>switch</code>语句提供了一个便利的途径，让我们在若干个固定的选项中做出选择，解决了代码中出现大量的<code>else if</code>问题。</p><h2 id="Switch语句的写法："><a href="#Switch语句的写法：" class="headerlink" title="Switch语句的写法："></a>Switch语句的写法：</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式)&#123; &#x2F;&#x2F;表达式的值必须是整数类型(int,char...)    case 常量表达式1: &#x2F;&#x2F;常量表达式必须是整数类型的常量(int,char...)        语句组1        break;    case 常量表达式2:        语句组2        break;    .....    case 常量表达式3:        语句组3    break;    default:        语句组n+1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>switch</code>语句对表达式进行判断，如果表达式的值等于常量表达式的值，则执行对应的语句组，进而执行<code>break</code>。程序在执行完<code>break</code>后，执行<code>default</code>及<code>default</code>对应的语句组。</p><p><strong>【注】</strong></p><ul><li>如果没有写<code>break</code>，则不会直接跳转到<code>default</code>，程序会依次进行运行，直到<code>switch</code>语句运行结束。（至少需要写一个<code>break</code>，不然易引发缺陷，造成代码错误）。</li><li><code>default</code>可以不写，但是如果<code>switch</code>语句的表达式和常量表达式没有一个是对应的，则程序中的<code>switch</code>语句相当于没有运行。</li></ul><p><strong>例子:</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    int n;    scanf(&quot;%d&quot;, &amp;n);    switch (n) &#123;        case 1:            printf(&quot;Monday&quot;);            break;        case 2:            printf(&quot;Tuesday&quot;);            break;        case 3:            printf(&quot;Wednesday&quot;);            break;        case 4:            printf(&quot;Thursday&quot;);            break;        case 5:            printf(&quot;Friday&quot;);            break;        case 6:            printf(&quot;Saturday&quot;);            break;        case 7:            printf(&quot;Sunday&quot;);            break;        default:            printf(&quot;Illegal&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++输入输出和算术运算</title>
      <link href="2021/01/24/c-c/c-shu-ru-shu-chu-he-suan-zhu-yun-suan/"/>
      <url>2021/01/24/c-c/c-shu-ru-shu-chu-he-suan-zhu-yun-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="C-的输入输出"><a href="#C-的输入输出" class="headerlink" title="C++的输入输出"></a>C++的输入输出</h2><p>C++具有两种输入和输出的运算形式，分别为<code>cin</code>、<code>scanf</code>（输入）和<code>cout</code>、<code>printf</code>（输出）。</p><h3 id="cin和cout形式"><a href="#cin和cout形式" class="headerlink" title="cin和cout形式"></a>cin和cout形式</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main()&#123;    int c;    while ((c &#x3D; cin.get()) !&#x3D; EOF)&#123;        &#x2F;&#x2F;cin.get()的返回值是int,故需要强转        cout &lt;&lt; (char)c;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    int sum &#x3D; 0, value &#x3D; 0;    while (cin &gt;&gt; value)&#123;        sum +&#x3D; value;    &#x2F;&#x2F;将输入的数据累加到一起    &#125;    cout &lt;&lt; sum;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scanf和printf形式"><a href="#scanf和printf形式" class="headerlink" title="scanf和printf形式"></a>scanf和printf形式</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;int main()&#123;    char c;    while (scanf(&quot;%c&quot;, &amp;c) !&#x3D; EOF)&#123;        printf(&quot;%c&quot;, c);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>强调</strong>：</p><ul><li>输入流中不存在<code>EOF</code>，<code>EOF</code>是表示没有数据再进行输入了。</li><li><code>cin</code>和<code>cout</code>的速度比<code>scanf</code>和<code>printf</code>速度慢，输入、输出数据量较大时，建议用后者。</li><li>一个程序中不要同时使用<code>cin</code>和<code>scanf</code>，也不要同时使用<code>cout</code>和<code>printf</code>。</li></ul><h2 id="C-的算术运算"><a href="#C-的算术运算" class="headerlink" title="C++的算术运算"></a>C++的算术运算</h2><h3 id="运算的精度"><a href="#运算的精度" class="headerlink" title="运算的精度"></a>运算的精度</h3><p>做算术运算的时候，表达式结果的值的类型，以精度高的为准。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    int a &#x3D; 1;    double b &#x3D; 1.2;    cout &lt;&lt; a+b; &#x2F;&#x2F;打印结果为：2.2    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>精度大小比较：double &gt; long long &gt; int &gt; short &gt; char</p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>在运算时，有可能出现数据过大，造成溢出现象发生。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;int main()&#123;    printf(&quot;%d\n&quot;, (2147483646 + 6)&#x2F;2); &#x2F;&#x2F;打印结果：-1073741822    printf(&quot;%d&quot;, 2147483646&#x2F;2 + 6&#x2F;2);&#x2F;&#x2F;打印结果：1073741826    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决溢出的最好的办法就是使用更高精度的数据类型</p><h3 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符(++)"></a>自增运算符(++)</h3><ul><li>前置用法：++a； 将a的值加1，表达式的返回值为a加1后的值（先自加再返值）</li><li>后置用法：a++； 将a的值加1，表达式的返回值为a加1前的值（先返值再自加）</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main()&#123;    int n1 &#x3D; 5, n2 &#x3D; 6;    n1 &#x3D; n2 ++;    cout &lt;&lt; n1 &lt;&lt; &quot;,&quot; &lt;&lt; n2 &lt;&lt; endl; &#x2F;&#x2F;打印结果：6，7    n1 &#x3D; ++ n2;    cout &lt;&lt; n1 &lt;&lt; &quot;,&quot; &lt;&lt; n2 &lt;&lt; endl;&#x2F;&#x2F;打印结果：8,8    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：自减和自增同理。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
